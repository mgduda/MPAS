! Copyright (c) 2013,  Los Alamos National Security, LLC (LANS)
! and the University Corporation for Atmospheric Research (UCAR).
!
! Unless noted otherwise source code is licensed under the BSD license.
! Additional copyright and license information can be found in the LICENSE file
! distributed with this code, or at http://mpas-dev.github.com/license.html
!
!==================================================================================================
 module mpas_atmphys_driver_convection
 use mpas_kind_types
 use mpas_grid_types

 use mpas_atmphys_constants
 use mpas_atmphys_utilities
 use mpas_atmphys_vars

!wrf physics:
 use module_cu_gf
 use module_cu_kfeta
 use module_cu_tiedtke
 use module_cu_tiedtke_wrf331

 implicit none
 private
 public:: allocate_convection,     &
          deallocate_convection,   &
          init_convection,         &
          driver_convection,       &
          update_convection_step1, &
          update_convection_step2

 integer, private:: i,k,j


!>\brief MPAS driver for parameterization of convection.
!>\author Laura D. Fowler (send comments to laura@ucar.edu).
!>\date 2013-05-01.
!>
!>\details
!>
!> subroutines in mpas_atmphys_driver_convection:
!> ----------------------------------------------
!> allocate_convection     : allocate local arrays for parameterization of convection.
!> deallocate_convection   : deallocate local arrays for parameterization of convection.
!> init_convection         : initialization of individual convection scheme.
!> driver_convection       : main driver (called from subroutine physics_driver).
!> convection_from_MPAS    : initialize local arrays.
!> convection_to_MPAS      : copy local arrays to MPAS arrays.
!> update_convection_step1 : updates lifetime of deep convective clouds in Kain-Fritsch scheme.
!> update_convection_step2 : updates accumulated precipitation output from convection schemes.
!>
!> WRF physics called from driver_convection:
!> ------------------------------------------
!>    * module_cu_kfeta      : Kain-Fritsch convection scheme.
!>    * module_cu_tiedtke    : Tiedtke convection scheme.
!>    * module_cu_tiedtke.WRF3.3.1: Tiedtke convection scheme from WRF 3.3.1. 

!> add-ons and modifications to sourcecode:
!> ----------------------------------------
!>    * removed the pre-processor option "do_hydrostatic_pressure" before call to the subroutines 
!>      kf_eta_cps and tiedtke.
!>    * removed call to the updated Kain-Fritsch convection scheme.
!>      Laura D. Fowler (laura@ucar.edu) / 2013-05-29.
!>    * added the mean distance between cell centers in the call to the Kain-Fritsch convection
!>      parameterization of convection.
!>      Laura D. Fowler (laura@ucar.edu) / 2013-08-22. 
!>    * added interface for calling the "Grell GF" multi-scale convection scheme (module_cu_gf.F).
!>      Laura D. Fowler (laura@ucar.edu) / 2013-11-08.
!>    * in call to subroutine kf_eta_cps, replaced the variable g (that originally pointed to
!>      gravity) with gravity, for simplicity.
!>      Laura D. Fowler (laura@ucar.edu) / 2014-03-21.
!>    * in call to subroutine gfdrv, replaced the variable g (that originally pointed to gravity)
!>      with gravity, for simplicity.
!>      Laura D. Fowler (laura@ucar.edu) / 2014-04-10.
!>    * throughout the sourcecode, replaced all "var_struct" defined arrays by local pointers.
!>      Laura D. Fowler (laura@ucar.edu) / 2014-04-22.
!>    * modified sourcecode to use pools.
!>      Laura D. Fowler (laura@ucar.edu) / 2014-05-15.
!>    * modified sourcecode related to the implementation of the "Grell GF" parameterization of
!>      convection to use pools.
!>    * added variables gfconv_closure_deep and gfconv_closure_shallow to include separate closures
!>      for deep and shallow convection in the "Grell GF" multi-scale convection scheme.
!>      Laura D. Fowler (laura@ucar.edu) / 2014-05-28.
!>    * implemented call to module_cu_tiedtke.F from WRF version 3.6. The Tiedtke scheme from WRF
!>      3.6 is called using the option "tiedtke". Renamed module_cu_tiedtke.F from WRF 3.3.1 to
!>      module_cu_tiedtke.WRF3.3.1. The Tiedtke scheme from WRF 3.3.1 is called using the option
!>      "tiedtke.wrf3.3.1".
!>      Laura D. Fowler (laura@ucar.edu) / 2014-06-26.
!>    * in ./physics_wrf, updated the Tiedtke convection scheme to that in WRF version 3.6.1. The
!>      call to subroutine cu_tiedtke has been updated accordingly to include the sensible heat
!>      flux.
!>      Laura D. Fowler (laura@ucar.edu) / 2014-09-11.
!>    * for the "Grell GF" convection scheme, added the calculation of the distance between cell
!>      centers for variable resolution meshes. 
!>      Laura D. Fowler (laura@ucar.edu) / 2014.10-03.
!>    * for the "Grell GF" convection scheme, replaced the variable gdcloud_p by qccu_p and the
!>      variable gdcloud2_p with qicu_p.
!>      Laura D. Fowler (laura@ucar.edu) / 2015-02-13. 


 contains


!==================================================================================================
 subroutine allocate_convection
!==================================================================================================

 if(.not.allocated(cu_act_flag)) allocate(cu_act_flag(ims:ime,jms:jme)       )
 if(.not.allocated(rthcuten_p) ) allocate(rthcuten_p(ims:ime,kms:kme,jms:jme))
 if(.not.allocated(rqvcuten_p) ) allocate(rqvcuten_p(ims:ime,kms:kme,jms:jme))
 if(.not.allocated(rqccuten_p) ) allocate(rqccuten_p(ims:ime,kms:kme,jms:jme))
 if(.not.allocated(rqicuten_p) ) allocate(rqicuten_p(ims:ime,kms:kme,jms:jme))
 if(.not.allocated(pratec_p)   ) allocate(pratec_p(ims:ime,jms:jme)          )
 if(.not.allocated(raincv_p)   ) allocate(raincv_p(ims:ime,jms:jme)          )

 do i = its,ite
 do j = jts,jte
    pratec_p(i,j) = 0._RKIND
    raincv_p(i,j) = 0._RKIND
 enddo
 enddo

 do i = its,ite
 do k = kts,kte
 do j = jts,jte
    rthcuten_p(i,k,j) = 0._RKIND
    rqvcuten_p(i,k,j) = 0._RKIND
    rqccuten_p(i,k,j) = 0._RKIND
    rqicuten_p(i,k,j) = 0._RKIND
 enddo
 enddo
 enddo

 convection_select: select case(convection_scheme)

    case ("grell_gf")
       if(.not.allocated(ht_p)           ) allocate(ht_p(ims:ime,jms:jme)                )
       if(.not.allocated(cubot_p)        ) allocate(cubot_p(ims:ime,jms:jme)             )
       if(.not.allocated(cutop_p)        ) allocate(cutop_p(ims:ime,jms:jme)             )
       if(.not.allocated(kpbl_p)         ) allocate(kpbl_p(ims:ime,jms:jme)              )
       if(.not.allocated(k22_shallow_p)  ) allocate(k22_shallow_p(ims:ime,jms:jme)       )
       if(.not.allocated(kbcon_shallow_p)) allocate(kbcon_shallow_p(ims:ime,jms:jme)     )
       if(.not.allocated(ktop_shallow_p) ) allocate(ktop_shallow_p(ims:ime,jms:jme)      )
       if(.not.allocated(kbot_shallow_p) ) allocate(kbot_shallow_p(ims:ime,jms:jme)      )
       if(.not.allocated(ktop_deep_p)    ) allocate(ktop_deep_p(ims:ime,jms:jme)         )

       if(.not.allocated(dx_p)           ) allocate(dx_p(ims:ime,jms:jme)                )
       if(.not.allocated(area_p)         ) allocate(area_p(ims:ime,jms:jme)              )
       if(.not.allocated(gsw_p)          ) allocate(gsw_p(ims:ime,jms:jme)               )
       if(.not.allocated(hfx_p)          ) allocate(hfx_p(ims:ime,jms:jme)               )
       if(.not.allocated(qfx_p)          ) allocate(qfx_p(ims:ime,jms:jme)               )
       if(.not.allocated(xland_p)        ) allocate(xland_p(ims:ime,jms:jme)             )

       if(.not.allocated(rthblten_p)     ) allocate(rthblten_p(ims:ime,kms:kme,jms:jme)  )
       if(.not.allocated(rthdynten_p)    ) allocate(rthdynten_p(ims:ime,kms:kme,jms:jme) )
       if(.not.allocated(rthraten_p)     ) allocate(rthraten_p(ims:ime,kms:kme,jms:jme)  )
       if(.not.allocated(rqvblten_p)     ) allocate(rqvblten_p(ims:ime,kms:kme,jms:jme)  )
       if(.not.allocated(rqvdynten_p)    ) allocate(rqvdynten_p(ims:ime,kms:kme,jms:jme) )

       if(.not.allocated(apras_p)        ) allocate(apras_p(ims:ime,jms:jme)             )
       if(.not.allocated(aprcapma_p)     ) allocate(aprcapma_p(ims:ime,jms:jme)          )
       if(.not.allocated(aprcapme_p)     ) allocate(aprcapme_p(ims:ime,jms:jme)          )
       if(.not.allocated(aprcapmi_p)     ) allocate(aprcapmi_p(ims:ime,jms:jme)          )
       if(.not.allocated(aprgr_p)        ) allocate(aprgr_p(ims:ime,jms:jme)             )
       if(.not.allocated(aprmc_p)        ) allocate(aprmc_p(ims:ime,jms:jme)             )
       if(.not.allocated(aprst_p)        ) allocate(aprst_p(ims:ime,jms:jme)             )
       if(.not.allocated(aprw_p)         ) allocate(aprw_p(ims:ime,jms:jme)              )
       if(.not.allocated(xmb_total_p)    ) allocate(xmb_total_p(ims:ime,jms:jme)         )
       if(.not.allocated(xmb_shallow_p)  ) allocate(xmb_shallow_p(ims:ime,jms:jme)       )
       if(.not.allocated(edtout_p)       ) allocate(edtout_p(ims:ime,jms:jme)            )

       if(.not.allocated(cugdtten_p)     ) allocate(cugdtten_p(ims:ime,kms:kme,jms:jme)  )
       if(.not.allocated(cugdttens_p)    ) allocate(cugdttens_p(ims:ime,kms:kme,jms:jme) )
       if(.not.allocated(cugdqvten_p)    ) allocate(cugdqvten_p(ims:ime,kms:kme,jms:jme) )
       if(.not.allocated(cugdqvtens_p)   ) allocate(cugdqvtens_p(ims:ime,kms:kme,jms:jme))
       if(.not.allocated(cugdqcten_p)    ) allocate(cugdqcten_p(ims:ime,kms:kme,jms:jme) )
       if(.not.allocated(qccu_p)         ) allocate(qccu_p(ims:ime,kms:kme,jms:jme)      )
       if(.not.allocated(qicu_p)         ) allocate(qicu_p(ims:ime,kms:kme,jms:jme)      )

    case ("kain_fritsch")
       if(.not.allocated(dx_p)       ) allocate(dx_p(ims:ime,jms:jme)              )
       if(.not.allocated(area_p)     ) allocate(area_p(ims:ime,jms:jme)            )
       if(.not.allocated(nca_p)      ) allocate(nca_p(ims:ime,jms:jme)             )
       if(.not.allocated(cubot_p)    ) allocate(cubot_p(ims:ime,jms:jme)           )
       if(.not.allocated(cutop_p)    ) allocate(cutop_p(ims:ime,jms:jme)           ) 
       if(.not.allocated(w0avg_p)    ) allocate(w0avg_p(ims:ime,kms:kme,jms:jme)   )
       if(.not.allocated(rqrcuten_p) ) allocate(rqrcuten_p(ims:ime,kms:kme,jms:jme))
       if(.not.allocated(rqscuten_p) ) allocate(rqscuten_p(ims:ime,kms:kme,jms:jme))

       do i = its,ite
       do j = jts,jte
          cubot_p(i,j) = DBLE(kte+1)
          cutop_p(i,j) = DBLE(kts)
       enddo
       enddo

       do i = its,ite
       do k = kts,kte
       do j = jts,jte
          rqrcuten_p(i,k,j) = 0._RKIND
          rqscuten_p(i,k,j) = 0._RKIND
       enddo
       enddo
       enddo

    case ("tiedtke","tiedtke.wrf3.3.1")
       if(.not.allocated(hfx_p)        ) allocate(hfx_p(ims:ime,jms:jme)                )
       if(.not.allocated(qfx_p)        ) allocate(qfx_p(ims:ime,jms:jme)                )
       if(.not.allocated(xland_p)      ) allocate(xland_p(ims:ime,jms:jme)              )
       if(.not.allocated(rqvdynten_p)  ) allocate(rqvdynten_p(ims:ime,kms:kme,jms:jme)  )
       if(.not.allocated(rqvdynblten_p)) allocate(rqvdynblten_p(ims:ime,kms:kme,jms:jme))
       if(.not.allocated(rucuten_p)    ) allocate(rucuten_p(ims:ime,kms:kme,jms:jme)    )
       if(.not.allocated(rvcuten_p)    ) allocate(rvcuten_p(ims:ime,kms:kme,jms:jme)    )

       do i = its,ite
       do j = jts,jte
          hfx_p(i,j)   = 0._RKIND
          qfx_p(i,j)   = 0._RKIND
          xland_p(i,j) = 0._RKIND
       enddo
       enddo

       do i = its,ite
       do k = kts,kte
       do j = jts,jte
          rqvdynten_p(i,k,j)   = 0._RKIND
          rqvdynblten_p(i,k,j) = 0._RKIND
          rucuten_p(i,k,j)     = 0._RKIND
          rvcuten_p(i,k,j)     = 0._RKIND
       enddo
       enddo
       enddo

    case default

 end select convection_select

 end subroutine allocate_convection

!==================================================================================================
 subroutine deallocate_convection
!==================================================================================================

 if(allocated(cu_act_flag)) deallocate(cu_act_flag)
 if(allocated(rthcuten_p) ) deallocate(rthcuten_p )
 if(allocated(rqvcuten_p) ) deallocate(rqvcuten_p )
 if(allocated(rqccuten_p) ) deallocate(rqccuten_p )
 if(allocated(rqicuten_p) ) deallocate(rqicuten_p )
 if(allocated(pratec_p)   ) deallocate(pratec_p   )
 if(allocated(raincv_p)   ) deallocate(raincv_p   )

 convection_select: select case(convection_scheme)

    case ("grell_gf")
       if(allocated(ht_p)           ) deallocate(ht_p           )
       if(allocated(cubot_p)        ) deallocate(cubot_p        )
       if(allocated(cutop_p)        ) deallocate(cutop_p        )
       if(allocated(kpbl_p)         ) deallocate(kpbl_p         )
       if(allocated(k22_shallow_p)  ) deallocate(k22_shallow_p  )
       if(allocated(kbcon_shallow_p)) deallocate(kbcon_shallow_p)
       if(allocated(ktop_shallow_p) ) deallocate(ktop_shallow_p )
       if(allocated(kbot_shallow_p) ) deallocate(kbot_shallow_p )
       if(allocated(ktop_deep_p)    ) deallocate(ktop_deep_p    )

       if(allocated(dx_p)           ) deallocate(dx_p           )
       if(allocated(area_p)         ) deallocate(area_p         )
       if(allocated(gsw_p)          ) deallocate(gsw_p          )
       if(allocated(hfx_p)          ) deallocate(hfx_p          )
       if(allocated(qfx_p)          ) deallocate(qfx_p          )
       if(allocated(xland_p)        ) deallocate(xland_p        )
       if(allocated(rthblten_p)     ) deallocate(rthblten_p     )
       if(allocated(rthdynten_p)    ) deallocate(rthdynten_p    )
       if(allocated(rthraten_p)     ) deallocate(rthraten_p     )
       if(allocated(rqvblten_p)     ) deallocate(rqvblten_p     )
       if(allocated(rqvdynten_p)    ) deallocate(rqvdynten_p    )

       if(allocated(apras_p)        ) deallocate(apras_p        )
       if(allocated(aprcapma_p)     ) deallocate(aprcapma_p     )
       if(allocated(aprcapme_p)     ) deallocate(aprcapme_p     )
       if(allocated(aprcapmi_p)     ) deallocate(aprcapmi_p     )
       if(allocated(aprgr_p)        ) deallocate(aprgr_p        )
       if(allocated(aprmc_p)        ) deallocate(aprmc_p        )
       if(allocated(aprst_p)        ) deallocate(aprst_p        )
       if(allocated(aprw_p)         ) deallocate(aprw_p         )
       if(allocated(xmb_total_p)    ) deallocate(xmb_total_p    )
       if(allocated(xmb_shallow_p)  ) deallocate(xmb_shallow_p  )
       if(allocated(edtout_p)       ) deallocate(edtout_p       )
       if(allocated(cugdtten_p)     ) deallocate(cugdtten_p     )
       if(allocated(cugdttens_p)    ) deallocate(cugdttens_p    )
       if(allocated(cugdqvten_p)    ) deallocate(cugdqvten_p    )
       if(allocated(cugdqvtens_p)   ) deallocate(cugdqvtens_p   )
       if(allocated(cugdqcten_p)    ) deallocate(cugdqcten_p    )
       if(allocated(qccu_p)         ) deallocate(qccu_p         )
       if(allocated(qicu_p)         ) deallocate(qicu_p         )

    case ("kain_fritsch")
       if(allocated(dx_p)           ) deallocate(dx_p           )
       if(allocated(area_p)         ) deallocate(area_p         )
       if(allocated(nca_p)          ) deallocate(nca_p          )
       if(allocated(cubot_p)        ) deallocate(cubot_p        )
       if(allocated(cutop_p)        ) deallocate(cutop_p        ) 
       if(allocated(w0avg_p)        ) deallocate(w0avg_p        )
       if(allocated(rqrcuten_p)     ) deallocate(rqrcuten_p     )
       if(allocated(rqscuten_p)     ) deallocate(rqscuten_p     )

    case ("tiedtke","tiedtke.wrf3.3.1")
       if(allocated(hfx_p)          ) deallocate(hfx_p          )
       if(allocated(qfx_p)          ) deallocate(qfx_p          )
       if(allocated(xland_p)        ) deallocate(xland_p        )
       if(allocated(rqvdynten_p)    ) deallocate(rqvdynten_p    )
       if(allocated(rqvdynblten_p)  ) deallocate(rqvdynblten_p  )
       if(allocated(rucuten_p)      ) deallocate(rucuten_p      )
       if(allocated(rvcuten_p)      ) deallocate(rvcuten_p      )

    case default

 end select convection_select

 end subroutine deallocate_convection

!==================================================================================================
 subroutine init_convection(mesh,configs,diag_physics)
!==================================================================================================

!input arguments:
 type(mpas_pool_type),intent(in):: mesh
 type(mpas_pool_type),intent(in):: configs

!inout arguments:
 type(mpas_pool_type),intent(inout):: diag_physics

!local pointers:
 logical,pointer:: config_do_restart
 integer,pointer:: nCells
 real(kind=RKIND),dimension(:),pointer:: nca

!local variables:
 integer:: iCell

!--------------------------------------------------------------------------------------------------
! write(0,*)
! write(0,*) '--- enter subroutine init_convection:'

 call mpas_pool_get_dimension(mesh,'nCells',nCells)
 call mpas_pool_get_config(configs,'config_do_restart',config_do_restart)
 call mpas_pool_get_array(diag_physics,'nca',nca)

 convection_select: select case(convection_scheme)

    case ("kain_fritsch")
!       write(0,*) '    enter kain-fritsch initialization:'
       if(.not. config_do_restart) then
          do iCell = 1, nCells
             nca(iCell) = -100._RKIND
          enddo
       endif
       call kf_lutab(svp1,svp2,svp3,svpt0)
!       write(0,*) '    end kain-kritsch initialization'

    case ("tiedtke","tiedtke.wrf3.3.1")
       write(0,*) '    enter tiedtke initialization:'
!      write(mpas_err_message,'(A,A10)') &
!        'Tiedtke is being tested. Do not use right now. Thanks '
!      call physics_error_fatal(mpas_err_message)

    case default

 end select convection_select

! write(0,*) '--- end subroutine init_convection'

 end subroutine init_convection

!==================================================================================================
 subroutine driver_convection(itimestep,configs,mesh,sfc_input,diag_physics,tend_physics)
!==================================================================================================

!input and output arguments:
 integer,intent(in):: itimestep
 type(mpas_pool_type),intent(in):: configs
 type(mpas_pool_type),intent(in):: mesh
 type(mpas_pool_type),intent(in):: sfc_input
 type(mpas_pool_type),intent(inout):: diag_physics
 type(mpas_pool_type),intent(inout):: tend_physics

!local pointers:
 integer,pointer:: gfconv_closure_deep,gfconv_closure_shallow
 real(kind=RKIND),pointer:: len_disp

!local variables and arrays:
 logical:: log_convection
 integer:: icount
 real(kind=RKIND):: dx

!variables specific to Kain_Fritsch parameterization:
 logical:: warm_rain,adapt_step_flag
 integer:: ktau
 real(kind=RKIND):: curr_secs
 real(kind=RKIND):: cudt
 real(kind=RKIND):: cudtacttime

!temp:
 real(kind=RKIND):: dx_1d
 real(kind=RKIND):: max_rthcuten
 real(kind=RKIND):: min_rthcuten

!==================================================================================================
! write(0,*)
! write(0,*) '--- enter convection_driver: dt_cu=',dt_cu

 call mpas_pool_get_config(configs,'config_gfconv_closure_deep',gfconv_closure_deep)
 call mpas_pool_get_config(configs,'config_gfconv_closure_shallow',gfconv_closure_shallow)
 call mpas_pool_get_config(configs,'config_len_disp',len_disp)

!initialize instantaneous precipitation, and copy convective tendencies from the dynamics to
!the physics grid:
 call convection_from_MPAS(dt_dyn,configs,mesh,sfc_input,diag_physics,tend_physics)

!... convert the convection time-step to minutes:
 cudt = dt_cu/60.

!... call to convection schemes:
 curr_secs   = -1
 cudtacttime = -1
 adapt_step_flag = .false.
 do j = jts, jte
 do i = its, ite
    cu_act_flag(i,j) = .false.
 enddo
 enddo

 convection_select: select case(convection_scheme)

    case ("grell_gf")
       dx_1d = len_disp
       write(0,*) '--- enter subroutine gfdrv:',dx_1d
       write(0,*) '--- gfconv_closure_deep    =', gfconv_closure_deep
       write(0,*) '--- gfconv_closure_shallow =', gfconv_closure_shallow 
       call gfdrv( &
             dt            = dt_dyn              , itimestep       = itimestep              , &
             dxCell        = dx_p                , areaCell        = area_p                 , &
             u             = u_p                 , v               = v_p                    , &
             w             = w_p                 , t               = t_p                    , &
             q             = qv_p                , rho             = rho_p                  , &
             p             = pres_hyd_p          , pi              = pi_p                   , &
             p8w           = pres2_hyd_p         , dz8w            = dz_p                   , &
             ht            = ht_p                , xland           = xland_p                , &
             gsw           = gsw_p               , xlv             = xlv                    , &
             cp            = cp                  , g               = gravity                , &
             r_v           = R_v                 , hfx             = hfx_p                  , &
             qfx           = qfx_p               , rthblten        = rthblten_p             , &
             rqvblten      = rqvblten_p          , rthften         = rthdynten_p            , &
             rqvften       = rqvdynten_p         , rthraten        = rthraten_p             , &
             kpbl          = kpbl_p              , raincv          = raincv_p               , &
             pratec        = pratec_p            , apr_gr          = aprgr_p                , &
             apr_w         = aprw_p              , apr_mc          = aprmc_p                , &
             apr_st        = aprst_p             , apr_as          = apras_p                , &
             apr_capma     = aprcapma_p          , apr_capme       = aprcapme_p             , &
             apr_capmi     = aprcapmi_p          , cugd_tten       = cugdtten_p             , &
             cugd_qvten    = cugdqvten_p         , cugd_ttens      = cugdttens_p            , &
             cugd_qvtens   = cugdqvtens_p        , cugd_qcten      = cugdqcten_p            , &
             cugd_avedx    = cugd_avedx          , xmb_total       = xmb_total_p            , &
             edt_out       = edtout_p            , rthcuten        = rthcuten_p             , &
             rqvcuten      = rqvcuten_p          , rqccuten        = rqccuten_p             , &
             rqicuten      = rqicuten_p          , htop            = cutop_p                , &
             hbot          = cubot_p             , gdc             = qccu_p                 , &
             gdc2          = qicu_p              , ktop_shallow    = ktop_shallow_p         , &
             ktop_deep     = ktop_deep_p         , k22_shallow     = k22_shallow_p          , &
             kbcon_shallow = kbcon_shallow_p     , xmb_shallow     = xmb_shallow_p          , &
             imomentum     = imomentum           , ishallow_g3     = ishallow               , &
             ichoice_deep  = gfconv_closure_deep , ichoice_shallow = gfconv_closure_shallow , &
             cu_act_flag   = cu_act_flag         , warm_rain       = warm_rain              , &
             periodic_x    = periodic_x          , periodic_y      = periodic_y             , &
             f_qv          = f_qv                , f_qc            = f_qc                   , &
             f_qr          = f_qr                , f_qi            = f_qi                   , &
             f_qs          = f_qs                                                           , &
             ids = ids , ide = ide , jds = jds , jde = jde , kds = kds , kde = kde , &
             ims = ims , ime = ime , jms = jms , jme = jme , kms = kds , kme = kme , &
             its = its , ite = ite , jts = jts , jte = jte , kts = kts , kte = kte   &
                 )


    case ("kain_fritsch")
       if(itimestep == 1) then
          ktau = itimestep
       else
          ktau = itimestep + 1
       endif

       call  kf_eta_cps ( &
             pcps            = pres_hyd_p      , t         = t_p        ,            &
             dt              = dt_dyn          , ktau      = ktau       ,            &
             dxCell          = dx_p            , areaCell  = area_p     ,            &
             cudt            = cudt            , curr_secs = curr_secs  ,            & 
             adapt_step_flag = adapt_step_flag , rho       = rho_p      ,            &
             raincv          = raincv_p        , pratec    = pratec_p   ,            &
             nca             = nca_p           , u         = u_p        ,            &
             v               = v_p             , th        = th_p       ,            &
             pi              = pi_p            , w         = w_p        ,            &
             dz8w            = dz_p            , w0avg     = w0avg_p    ,            &
             xlv0            = xlv0            , xlv1      = xlv1       ,            &
             xls0            = xls0            , xls1      = xls1       ,            &
             cp              = cp              , r         = r_d        ,            &
             g               = gravity         , ep1       = ep_1       ,            &
             ep2             = ep_2            , svp1      = svp1       ,            &
             svp2            = svp2            , svp3      = svp3       ,            &
             svpt0           = svpt0           , stepcu    = n_cu       ,            &
             cu_act_flag     = cu_act_flag     , warm_rain = warm_rain  ,            &
             cutop           = cutop_p         , cubot     = cubot_p    ,            &
             qv              = qv_p            , f_qv      = f_qv       ,            &
             f_qc            = f_qc            , f_qr      = f_qr       ,            &
             f_qi            = f_qi            , f_qs      = f_qs       ,            &
             rthcuten        = rthcuten_p      , rqvcuten  = rqvcuten_p ,            &
             rqccuten        = rqccuten_p      , rqrcuten  = rqrcuten_p ,            &
             rqicuten        = rqicuten_p      , rqscuten  = rqscuten_p ,            &
             ids = ids , ide = ide , jds = jds , jde = jde , kds = kds , kde = kde , &
             ims = ims , ime = ime , jms = jms , jme = jme , kms = kds , kme = kme , &
             its = its , ite = ite , jts = jts , jte = jte , kts = kts , kte = kte   &
                        )

    case("tiedtke")
!       write(0,*) '--- enter subroutine cu_tiedtke:'
       call cu_tiedtke ( &
             pcps        = pres_hyd_p    , p8w             = pres2_hyd_p     ,       &
             znu         = znu_hyd_p     , t3d             = t_p             ,       &
             dt          = dt_dyn        , itimestep       = itimestep       ,       &
             stepcu      = n_cu          , raincv          = raincv_p        ,       &
             pratec      = pratec_p      , hfx             = hfx_p           ,       &
             qfx         = qfx_p         , u3d             = u_p             ,       &
             v3d         = v_p           , w               = w_p             ,       & 
             qv3d        = qv_p          , qc3d            = qc_p            ,       &
             qi3d        = qi_p          , pi3d            = pi_p            ,       &
             rho3d       = rho_p         , qvften          = rqvdynten_p     ,       &
             qvpblten    = rqvdynblten_p , dz8w            = dz_p            ,       & 
             xland       = xland_p       , cu_act_flag     = cu_act_flag     ,       &
             f_qv        = f_qv          , f_qc            = f_qc            ,       &
             f_qr        = f_qr          , f_qi            = f_qi            ,       &
             f_qs        = f_qs          , rthcuten        = rthcuten_p      ,       &
             rqvcuten    = rqvcuten_p    , rqccuten        = rqccuten_p      ,       &
             rqicuten    = rqicuten_p    , rucuten         = rucuten_p       ,       &
             rvcuten     = rvcuten_p     ,                                           &
             ids = ids , ide = ide , jds = jds , jde = jde , kds = kds , kde = kde , &
             ims = ims , ime = ime , jms = jms , jme = jme , kms = kds , kme = kme , &
             its = its , ite = ite , jts = jts , jte = jte , kts = kts , kte = kte   &
                    )

    case("tiedtke.wrf3.3.1")
       write(0,*) '--- enter subroutine cu_tiedtke_wrf331:'
       call cu_tiedtke_wrf331 ( &
             pcps        = pres_hyd_p  , p8w             = pres2_hyd_p     ,         &
             znu         = znu_hyd_p   , t3d             = t_p             ,         &
             dt          = dt_dyn      , itimestep       = itimestep       ,         &
             stepcu      = n_cu        , raincv          = raincv_p        ,         &
             pratec      = pratec_p    , qfx             = qfx_p           ,         &
             u3d         = u_p         , v3d             = v_p             ,         & 
             w           = w_p         , qv3d            = qv_p            ,         &
             qc3d        = qc_p        , qi3d            = qi_p            ,         &
             pi3d        = pi_p        , rho3d           = rho_p           ,         &
             qvften      = rqvdynten_p , qvpblten        = rqvdynblten_p   ,         &
             dz8w        = dz_p        , xland           = xland_p         ,         &
             cu_act_flag = cu_act_flag , cudt            = dt_cu           ,         &
             f_qv        = f_qv        , f_qc            = f_qc            ,         &
             f_qr        = f_qr        , f_qi            = f_qi            ,         &
             f_qs        = f_qs        , rthcuten        = rthcuten_p      ,         &
             rqvcuten    = rqvcuten_p  , rqccuten        = rqccuten_p      ,         &
             rqicuten    = rqicuten_p  , rucuten         = rucuten_p       ,         &
             rvcuten     = rvcuten_p   ,                                             &
             ids = ids , ide = ide , jds = jds , jde = jde , kds = kds , kde = kde , &
             ims = ims , ime = ime , jms = jms , jme = jme , kms = kds , kme = kme , &
             its = its , ite = ite , jts = jts , jte = jte , kts = kts , kte = kte   &
                    )

    case default

 end select convection_select

!copy instantaneous and accumulated precipitation, convective tendencies, and "other" arrays
!specific to convection parameterization back to the dynamics grid:
 call convection_to_MPAS(diag_physics,tend_physics)

 write(0,*) '--- end subroutine convection_driver'

 end subroutine driver_convection

!==================================================================================================
 subroutine convection_from_MPAS(dt_dyn,configs,mesh,sfc_input,diag_physics,tend_physics)
!==================================================================================================
!input arguments:
 type(mpas_pool_type),intent(in):: configs
 type(mpas_pool_type),intent(in):: mesh
 type(mpas_pool_type),intent(in):: sfc_input
 type(mpas_pool_type),intent(in):: diag_physics
 type(mpas_pool_type),intent(in):: tend_physics
 real(kind=RKIND),intent(in):: dt_dyn

!local pointers:
 integer,dimension(:),pointer:: kpbl,k22_shallow,kbcon_shallow,ktop_shallow,ktop_deep
 real(kind=RKIND),dimension(:),pointer  :: areaCell,meshDensity,dcEdge_m
 real(kind=RKIND),dimension(:),pointer  :: nca,cubot,cutop,cuprec,raincv
 real(kind=RKIND),dimension(:),pointer  :: gsw,hfx,qfx,xland,ter
 real(kind=RKIND),dimension(:),pointer  :: apr_as,apr_capma,apr_capme,apr_capmi,apr_gr,apr_mc, &
                                           apr_st,apr_w,edt_out,xmb_total,xmb_shallow
 real(kind=RKIND),dimension(:,:),pointer:: qc_cu,qi_cu
 real(kind=RKIND),dimension(:,:),pointer:: w0avg
 real(kind=RKIND),dimension(:,:),pointer:: rthcuten,rqvcuten,rqccuten,rqicuten,rqrcuten,rqscuten
 real(kind=RKIND),dimension(:,:),pointer:: cugd_tten,cugd_ttens,cugd_qvten,cugd_qvtens,cugd_qcten
 real(kind=RKIND),dimension(:,:),pointer:: rthblten,rthdynten,rthratenlw,rthratensw
 real(kind=RKIND),dimension(:,:),pointer:: rqvblten,rqvdynten,rucuten,rvcuten

!local variables:
 integer:: iEdge
 real(kind=RKIND),pointer:: len_disp

!--------------------------------------------------------------------------------------------------
! write(0,*)
! write(0,*) '--- enter subroutine convection_from_MPAS:'

 call mpas_pool_get_config(configs,'config_len_disp',len_disp)

 call mpas_pool_get_array(mesh,'areaCell'   ,areaCell)
 call mpas_pool_get_array(mesh,'meshDensity',meshDensity)

 call mpas_pool_get_array(sfc_input,'xland',xland)
 call mpas_pool_get_array(sfc_input,'ter'  ,ter  )

 call mpas_pool_get_array(diag_physics,'gsw'          ,gsw          )
 call mpas_pool_get_array(diag_physics,'hfx'          ,hfx          )
 call mpas_pool_get_array(diag_physics,'qfx'          ,qfx          )
 call mpas_pool_get_array(diag_physics,'kpbl'         ,kpbl         )
 call mpas_pool_get_array(diag_physics,'dcEdge_m'     ,dcEdge_m     )
 call mpas_pool_get_array(diag_physics,'nca'          ,nca          )
 call mpas_pool_get_array(diag_physics,'cubot'        ,cubot        )
 call mpas_pool_get_array(diag_physics,'cutop'        ,cutop        )
 call mpas_pool_get_array(diag_physics,'cuprec'       ,cuprec       )
 call mpas_pool_get_array(diag_physics,'raincv'       ,raincv       )
 call mpas_pool_get_array(diag_physics,'w0avg'        ,w0avg        )
 call mpas_pool_get_array(diag_physics,'apr_as'       ,apr_as       )
 call mpas_pool_get_array(diag_physics,'apr_capma'    ,apr_capma    )
 call mpas_pool_get_array(diag_physics,'apr_capme'    ,apr_capme    )
 call mpas_pool_get_array(diag_physics,'apr_capmi'    ,apr_capmi    )
 call mpas_pool_get_array(diag_physics,'apr_gr'       ,apr_gr       )
 call mpas_pool_get_array(diag_physics,'apr_mc'       ,apr_mc       )
 call mpas_pool_get_array(diag_physics,'apr_st'       ,apr_st       )
 call mpas_pool_get_array(diag_physics,'apr_w'        ,apr_w        )
 call mpas_pool_get_array(diag_physics,'edt_out'      ,edt_out      )
 call mpas_pool_get_array(diag_physics,'xmb_total'    ,xmb_total    )
 call mpas_pool_get_array(diag_physics,'xmb_shallow'  ,xmb_shallow  )
 call mpas_pool_get_array(diag_physics,'k22_shallow'  ,k22_shallow  )
 call mpas_pool_get_array(diag_physics,'kbcon_shallow',kbcon_shallow)
 call mpas_pool_get_array(diag_physics,'ktop_shallow' ,ktop_shallow )
 call mpas_pool_get_array(diag_physics,'ktop_deep'    ,ktop_deep    )
 call mpas_pool_get_array(diag_physics,'qc_cu'        ,qc_cu        )
 call mpas_pool_get_array(diag_physics,'qi_cu'        ,qi_cu        )

 call mpas_pool_get_array(tend_physics,'rthblten'   ,rthblten   )
 call mpas_pool_get_array(tend_physics,'rthdynten'  ,rthdynten  )
 call mpas_pool_get_array(tend_physics,'rthratenlw' ,rthratenlw )
 call mpas_pool_get_array(tend_physics,'rthratensw' ,rthratensw )
 call mpas_pool_get_array(tend_physics,'rqvblten'   ,rqvblten   )
 call mpas_pool_get_array(tend_physics,'rqvdynten'  ,rqvdynten  )
 call mpas_pool_get_array(tend_physics,'rthcuten'   ,rthcuten   )
 call mpas_pool_get_array(tend_physics,'rqvcuten'   ,rqvcuten   )
 call mpas_pool_get_array(tend_physics,'rqccuten'   ,rqccuten   )
 call mpas_pool_get_array(tend_physics,'rqicuten'   ,rqicuten   )
 call mpas_pool_get_array(tend_physics,'rqrcuten'   ,rqrcuten   )
 call mpas_pool_get_array(tend_physics,'rqscuten'   ,rqscuten   )
 call mpas_pool_get_array(tend_physics,'rucuten'    ,rucuten    )
 call mpas_pool_get_array(tend_physics,'rvcuten'    ,rvcuten    )
 call mpas_pool_get_array(tend_physics,'cugd_tten'  ,cugd_tten  )
 call mpas_pool_get_array(tend_physics,'cugd_ttens' ,cugd_ttens )
 call mpas_pool_get_array(tend_physics,'cugd_qvten' ,cugd_qvten )
 call mpas_pool_get_array(tend_physics,'cugd_qvtens',cugd_qvtens)
 call mpas_pool_get_array(tend_physics,'cugd_qcten' ,cugd_qcten )

 do j = jts,jte
 do i = its,ite
    raincv_p(i,j) = raincv(i)
    pratec_p(i,j) = cuprec(i)
    do k = kts,kte
       rthcuten_p(i,k,j) = rthcuten(k,i)
       rqvcuten_p(i,k,j) = rqvcuten(k,i)
       rqccuten_p(i,k,j) = rqccuten(k,i)
       rqicuten_p(i,k,j) = rqicuten(k,i)
    enddo
 enddo
 enddo

 convection_select: select case(convection_scheme)

    case ("grell_gf")
       do j = jts,jte
       do i = its,ite
          dx_p(i,j) = len_disp / meshDensity(i)**0.25
          ht_p(i,j)            = ter(i)
          xland_p(i,j)         = xland(i)
          gsw_p(i,j)           = gsw(i)
          hfx_p(i,j)           = hfx(i)
          qfx_p(i,j)           = qfx(i)
          kpbl_p(i,j)          = kpbl(i)
          cubot_p(i,j)         = cubot(i)
          cutop_p(i,j)         = cutop(i)

          apras_p(i,j)         = apr_as(i)
          aprcapma_p(i,j)      = apr_capma(i)
          aprcapme_p(i,j)      = apr_capme(i)
          aprcapmi_p(i,j)      = apr_capmi(i)
          aprgr_p(i,j)         = apr_gr(i)
          aprmc_p(i,j)         = apr_mc(i)
          aprst_p(i,j)         = apr_st(i)
          aprw_p(i,j)          = apr_w(i)
          edtout_p(i,j)        = edt_out(i)
          xmb_total_p(i,j)     = xmb_total(i)
          xmb_shallow_p(i,j)   = xmb_shallow(i)

          k22_shallow_p(i,j)   = k22_shallow(i)
          kbcon_shallow_p(i,j) = kbcon_shallow(i)
          ktop_shallow_p(i,j)  = ktop_shallow(i)
          ktop_deep_p(i,j)     = ktop_deep(i)

          do k = kts,kte
             qccu_p(i,k,j)     = qc_cu(k,i)
             qicu_p(i,k,j)     = qi_cu(k,i)

             rthblten_p(i,k,j)   = rthblten(k,i)
             rthdynten_p(i,k,j)  = rthdynten(k,i)
             rthraten_p(i,k,j)   = rthratenlw(k,i) + rthratensw(k,i)
             rqvblten_p(i,k,j)   = rqvblten(k,i)
             rqvdynten_p(i,k,j)  = rqvdynten(k,i)
             cugdtten_p(i,k,j)   = cugd_tten(k,i)
             cugdttens_p(i,k,j)  = cugd_ttens(k,i)
             cugdqvten_p(i,k,j)  = cugd_qvten(k,i)
             cugdqvtens_p(i,k,j) = cugd_qvtens(k,i)
             cugdqcten_p(i,k,j)  = cugd_qcten(k,i)
          enddo

       enddo
       enddo

    case ("kain_fritsch")

       do j = jts,jte
       do i = its,ite
          !area of grid-cell:       
          area_p(i,j)  = areaCell(i)
          dx_p(i,j)    = dcEdge_m(i)
          cubot_p(i,j) = cubot(i)
          cutop_p(i,j) = cutop(i)

          do k = kts,kte
             rqrcuten_p(i,k,j) = rqrcuten(k,i)
             rqscuten_p(i,k,j) = rqscuten(k,i)
          enddo

          !decreases the characteristic time period that convection remains active. When nca_p
          !becomes less than the convective timestep, convective tendencies and precipitation
          !are reset to zero (note that this is also done in subroutine kf_eta_cps).
          nca_p(i,j) = nca(i)

          do k = kts,kte
             w0avg_p(i,k,j) = w0avg(k,i)
          enddo
       enddo
       enddo

    case ("tiedtke","tiedtke.wrf3.3.1")
       do j = jts,jte
       do i = its,ite
          xland_p(i,j) = xland(i)
          hfx_p(i,j)   = hfx(i)
          qfx_p(i,j)   = qfx(i)
       enddo

       do k = kts,kte
       do i = its,ite
          rqvdynblten_p(i,k,j) = rqvblten(k,i) 
          rqvdynten_p(i,k,j)   = rqvdynten(k,i)
          rucuten_p(i,k,j)     = rucuten(k,i)
          rvcuten_p(i,k,j)     = rvcuten(k,i)
       enddo
       enddo
       enddo
 
    case default

 end select convection_select
 
 end subroutine convection_from_MPAS

!==================================================================================================
 subroutine convection_to_MPAS(diag_physics,tend_physics)
!==================================================================================================
!inout arguments:
 type(mpas_pool_type),intent(inout):: diag_physics
 type(mpas_pool_type),intent(inout):: tend_physics

!local pointers:
 integer,dimension(:),pointer:: k22_shallow,kbcon_shallow,ktop_shallow,ktop_deep
 real(kind=RKIND),dimension(:),pointer  :: nca,cubot,cutop,cuprec,raincv
 real(kind=RKIND),dimension(:),pointer  :: apr_as,apr_capma,apr_capme,apr_capmi,apr_gr,apr_mc, &
                                           apr_st,apr_w,edt_out,xmb_total,xmb_shallow
 real(kind=RKIND),dimension(:,:),pointer:: qc_cu,qi_cu
 real(kind=RKIND),dimension(:,:),pointer:: w0avg
 real(kind=RKIND),dimension(:,:),pointer:: cugd_tten,cugd_ttens,cugd_qvten,cugd_qvtens,cugd_qcten
 real(kind=RKIND),dimension(:,:),pointer:: rthcuten,rqvcuten,rqccuten,rqicuten,rqrcuten,rqscuten
 real(kind=RKIND),dimension(:,:),pointer:: rucuten,rvcuten

!--------------------------------------------------------------------------------------------------

 call mpas_pool_get_array(diag_physics,'nca'          ,nca          )
 call mpas_pool_get_array(diag_physics,'cubot'        ,cubot        )
 call mpas_pool_get_array(diag_physics,'cutop'        ,cutop        )
 call mpas_pool_get_array(diag_physics,'cuprec'       ,cuprec       )
 call mpas_pool_get_array(diag_physics,'raincv'       ,raincv       )
 call mpas_pool_get_array(diag_physics,'w0avg'        ,w0avg        )
 call mpas_pool_get_array(diag_physics,'apr_as'       ,apr_as       )
 call mpas_pool_get_array(diag_physics,'apr_capma'    ,apr_capma    )
 call mpas_pool_get_array(diag_physics,'apr_capme'    ,apr_capme    )
 call mpas_pool_get_array(diag_physics,'apr_capmi'    ,apr_capmi    )
 call mpas_pool_get_array(diag_physics,'apr_gr'       ,apr_gr       )
 call mpas_pool_get_array(diag_physics,'apr_mc'       ,apr_mc       )
 call mpas_pool_get_array(diag_physics,'apr_st'       ,apr_st       )
 call mpas_pool_get_array(diag_physics,'apr_w'        ,apr_w        )
 call mpas_pool_get_array(diag_physics,'edt_out'      ,edt_out      )
 call mpas_pool_get_array(diag_physics,'xmb_total'    ,xmb_total    )
 call mpas_pool_get_array(diag_physics,'xmb_shallow'  ,xmb_shallow  )
 call mpas_pool_get_array(diag_physics,'k22_shallow'  ,k22_shallow  )
 call mpas_pool_get_array(diag_physics,'kbcon_shallow',kbcon_shallow)
 call mpas_pool_get_array(diag_physics,'ktop_shallow' ,ktop_shallow )
 call mpas_pool_get_array(diag_physics,'ktop_deep'    ,ktop_deep    )
 call mpas_pool_get_array(diag_physics,'qc_cu'        ,qc_cu        )
 call mpas_pool_get_array(diag_physics,'qi_cu'        ,qi_cu        )

 call mpas_pool_get_array(tend_physics,'rthcuten'   ,rthcuten   )
 call mpas_pool_get_array(tend_physics,'rqvcuten'   ,rqvcuten   )
 call mpas_pool_get_array(tend_physics,'rqccuten'   ,rqccuten   )
 call mpas_pool_get_array(tend_physics,'rqicuten'   ,rqicuten   )
 call mpas_pool_get_array(tend_physics,'rqrcuten'   ,rqrcuten   )
 call mpas_pool_get_array(tend_physics,'rqscuten'   ,rqscuten   )
 call mpas_pool_get_array(tend_physics,'rucuten'    ,rucuten    )
 call mpas_pool_get_array(tend_physics,'rvcuten'    ,rvcuten    )
 call mpas_pool_get_array(tend_physics,'cugd_tten'  ,cugd_tten  )
 call mpas_pool_get_array(tend_physics,'cugd_ttens' ,cugd_ttens )
 call mpas_pool_get_array(tend_physics,'cugd_qvten' ,cugd_qvten )
 call mpas_pool_get_array(tend_physics,'cugd_qvtens',cugd_qvtens)
 call mpas_pool_get_array(tend_physics,'cugd_qcten' ,cugd_qcten )

 do j = jts,jte
 do i = its,ite
    raincv(i) = raincv_p(i,j)
    cuprec(i) = pratec_p(i,j)
    do k = kts, kte
       rthcuten(k,i) = rthcuten_p(i,k,j)
       rqvcuten(k,i) = rqvcuten_p(i,k,j)
       rqccuten(k,i) = rqccuten_p(i,k,j)
       rqicuten(k,i) = rqicuten_p(i,k,j)
    enddo
 enddo
 enddo

 convection_select: select case(convection_scheme)

    case ("kain_fritsch")
       do j = jts,jte
       do i = its,ite
          cubot(i) = cubot_p(i,j)
          cutop(i) = cutop_p(i,j)
          nca(i)   = nca_p(i,j)
          do k = kts, kte
             w0avg(k,i)    = w0avg_p(i,k,j)
             rqrcuten(k,i) = rqrcuten_p(i,k,j)
             rqscuten(k,i) = rqscuten_p(i,k,j)
          enddo                          
       enddo
       enddo

    case ("grell_gf")
       do j = jts,jte
       do i = its,ite
          cubot(i)         = cubot_p(i,j)
          cutop(i)         = cutop_p(i,j)
          apr_as(i)        = apras_p(i,j)
          apr_capma(i)     = aprcapma_p(i,j)
          apr_capme(i)     = aprcapme_p(i,j)
          apr_capmi(i)     = aprcapmi_p(i,j)
          apr_gr(i)        = aprgr_p(i,j)
          apr_mc(i)        = aprmc_p(i,j)
          apr_st(i)        = aprst_p(i,j)
          apr_w(i)         = aprw_p(i,j)
          edt_out(i)       = edtout_p(i,j)
          xmb_total(i)     = xmb_total_p(i,j)
          xmb_shallow(i)   = xmb_shallow_p(i,j)
          k22_shallow(i)   = k22_shallow_p(i,j)
          kbcon_shallow(i) = kbcon_shallow_p(i,j)
          ktop_shallow(i)  = ktop_shallow_p(i,j)
          ktop_deep(i)     = ktop_deep_p(i,j)

          do k = kts,kte
             qc_cu(k,i)    = qccu_p(i,k,j)
             qi_cu(k,i)    = qicu_p(i,k,j)

             cugd_tten(k,i)   = cugdtten_p(i,k,j)
             cugd_ttens(k,i)  = cugdttens_p(i,k,j)
             cugd_qvten(k,i)  = cugdqvten_p(i,k,j)
             cugd_qvtens(k,i) = cugdqvtens_p(i,k,j)
             cugd_qcten(k,i)  = cugdqcten_p(i,k,j)
          enddo
       enddo
       enddo

    case ("tiedtke","tiedtkewrff3.3.1")
       do j = jts,jte
       do k = kts,kte
       do i = its,ite
          rucuten(k,i) = rucuten_p(i,k,j)
          rvcuten(k,i) = rvcuten_p(i,k,j)
       enddo
       enddo
       enddo

    case default

 end select convection_select

 end subroutine convection_to_MPAS

!==================================================================================================
 subroutine update_convection_step1(mesh,diag_physics,tend_physics)
!==================================================================================================
!input arguments:
 type(mpas_pool_type),intent(in):: mesh

!inout arguments:
 type(mpas_pool_type),intent(inout):: diag_physics
 type(mpas_pool_type),intent(inout):: tend_physics

!local pointers:
 integer,pointer:: nCellsSolve,nVertLevels

 real(kind=RKIND),dimension(:),pointer  :: nca,cubot,cutop,cuprec,raincv
 real(kind=RKIND),dimension(:,:),pointer:: rthcuten,rqvcuten,rqccuten,rqicuten,rqrcuten,rqscuten

!local variables and arrays:
 integer:: iCell,k

!--------------------------------------------------------------------------------------------------

 call mpas_pool_get_dimension(mesh,'nCellsSolve',nCellsSolve)
 call mpas_pool_get_dimension(mesh,'nVertLevels',nVertLevels)

 call mpas_pool_get_array(diag_physics,'nca'   ,nca   )
 call mpas_pool_get_array(diag_physics,'cubot' ,cubot )
 call mpas_pool_get_array(diag_physics,'cutop' ,cutop )
 call mpas_pool_get_array(diag_physics,'cuprec',cuprec)
 call mpas_pool_get_array(diag_physics,'raincv',raincv)

 call mpas_pool_get_array(tend_physics,'rthcuten',rthcuten)
 call mpas_pool_get_array(tend_physics,'rqvcuten',rqvcuten)
 call mpas_pool_get_array(tend_physics,'rqccuten',rqccuten)
 call mpas_pool_get_array(tend_physics,'rqicuten',rqicuten)
 call mpas_pool_get_array(tend_physics,'rqrcuten',rqrcuten)
 call mpas_pool_get_array(tend_physics,'rqscuten',rqscuten)

 convection_select: select case(convection_scheme)

    case ("kain_fritsch")

       do iCell = 1, nCellsSolve
          !decreases the characteristic time period that convection remains active. When nca_p
          !becomes less than the convective timestep, convective tendencies and precipitation
          !are reset to zero (note that this is also done in subroutine kf_eta_cps).
          if(nca(iCell) .gt. 0.) then
             nca(iCell) = nca(iCell) - dt_dyn
             
             if(nca(iCell) .lt. 0.5*dt_dyn) then
                do k = 1, nVertLevels
                   rthcuten(k,iCell) = 0._RKIND
                   rqvcuten(k,iCell) = 0._RKIND
                   rqccuten(k,iCell) = 0._RKIND
                   rqrcuten(k,iCell) = 0._RKIND
                   rqicuten(k,iCell) = 0._RKIND
                   rqscuten(k,iCell) = 0._RKIND
                enddo
                raincv(iCell) = 0._RKIND
                cuprec(iCell) = 0._RKIND
                cubot(iCell)  = kte+1
                cutop(iCell)  = kts
             endif
          endif
       enddo

    case default

 end select convection_select

 end subroutine update_convection_step1

!==================================================================================================
 subroutine update_convection_step2(configs,mesh,state,time_lev,diag_physics,tend_physics)
!==================================================================================================

!input arguments:
 type(mpas_pool_type),intent(in):: configs
 type(mpas_pool_type),intent(in):: mesh
 type(mpas_pool_type),intent(in):: state
 type(mpas_pool_type),intent(in):: tend_physics

 integer,intent(in):: time_lev

!inout arguments:
 type(mpas_pool_type),intent(inout):: diag_physics

!local pointers:
 integer,pointer:: nCellsSolve,nVertLevels
 integer,pointer:: index_qv
 integer,dimension(:),pointer:: i_rainc

 real(kind=RKIND),pointer:: bucket_rainc
 real(kind=RKIND),dimension(:),pointer:: cuprec,rainc
 real(kind=RKIND),dimension(:),pointer:: rqvcuten_vi,rqccuten_vi,rqrcuten_vi,rqicuten_vi,rqscuten_vi
 real(kind=RKIND),dimension(:,:),pointer:: qv,rho_zz,zgrid,zz
 real(kind=RKIND),dimension(:,:),pointer:: rqvcuten,rqccuten,rqrcuten,rqicuten,rqscuten
 real(kind=RKIND),dimension(:,:,:),pointer:: scalars

!local variables and arrays:
 integer:: iCell
 real(kind=RKIND):: dz,rho_a

!--------------------------------------------------------------------------------------------------

 call mpas_pool_get_config(configs,'config_bucket_rainc',bucket_rainc)

 call mpas_pool_get_dimension(mesh,'nCellsSolve',nCellsSolve)
 call mpas_pool_get_dimension(mesh,'nVertLevels',nVertLevels)

 call mpas_pool_get_array(mesh,'zgrid',zgrid)
 call mpas_pool_get_array(mesh,'zz'   ,zz   )

 call mpas_pool_get_dimension(state,'index_qv',index_qv)
 call mpas_pool_get_array(state,'scalars',scalars,time_lev)   
 call mpas_pool_get_array(state,'rho_zz' ,rho_zz ,time_lev)
 qv => scalars(index_qv,:,:)

 call mpas_pool_get_array(diag_physics,'i_rainc'    ,i_rainc    )
 call mpas_pool_get_array(diag_physics,'cuprec'     ,cuprec     )
 call mpas_pool_get_array(diag_physics,'rainc'      ,rainc      )
 call mpas_pool_get_array(diag_physics,'rqvcuten_vi',rqvcuten_vi)
 call mpas_pool_get_array(diag_physics,'rqccuten_vi',rqccuten_vi)
 call mpas_pool_get_array(diag_physics,'rqrcuten_vi',rqrcuten_vi)
 call mpas_pool_get_array(diag_physics,'rqicuten_vi',rqicuten_vi)
 call mpas_pool_get_array(diag_physics,'rqscuten_vi',rqscuten_vi)

 call mpas_pool_get_array(tend_physics,'rqvcuten',rqvcuten)
 call mpas_pool_get_array(tend_physics,'rqccuten',rqccuten)
 call mpas_pool_get_array(tend_physics,'rqrcuten',rqrcuten)
 call mpas_pool_get_array(tend_physics,'rqicuten',rqicuten)
 call mpas_pool_get_array(tend_physics,'rqscuten',rqscuten)

!update the accumulated precipitation at the end of each dynamic time-step:
 do iCell = 1, nCellsSolve
    rainc(iCell) = rainc(iCell) + cuprec(iCell) * dt_dyn

    if(l_acrain .and. bucket_rainc.gt.0._RKIND .and. &
       rainc(iCell).gt.bucket_rainc) then
       i_rainc(iCell) = i_rainc(iCell) + 1
       rainc(iCell)   = rainc(iCell) - bucket_rainc
    endif

 enddo

!calculate the vertically-averaged tendencies for water vapor, cloud water, rain, cloud
!ice, and snow:
 do iCell = 1, nCellsSolve
    rqvcuten_vi(iCell) = 0._RKIND
    rqccuten_vi(iCell) = 0._RKIND
    rqrcuten_vi(iCell) = 0._RKIND
    rqicuten_vi(iCell) = 0._RKIND
    rqscuten_vi(iCell) = 0._RKIND
    do k = 1, nVertLevels
       dz  = zgrid(k+1,iCell) - zgrid(k,iCell)
       rho_a = zz(k,iCell)*rho_zz(k,iCell)*dz / (1._RKIND + qv(k,iCell))
       rqvcuten_vi(iCell) = rqvcuten_vi(iCell) + rqvcuten(k,iCell)*rho_a
       rqccuten_vi(iCell) = rqccuten_vi(iCell) + rqccuten(k,iCell)*rho_a
       rqrcuten_vi(iCell) = rqrcuten_vi(iCell) + rqrcuten(k,iCell)*rho_a
       rqicuten_vi(iCell) = rqicuten_vi(iCell) + rqicuten(k,iCell)*rho_a
       rqscuten_vi(iCell) = rqscuten_vi(iCell) + rqscuten(k,iCell)*rho_a
    enddo
 enddo

 end subroutine update_convection_step2

!==================================================================================================
 end module mpas_atmphys_driver_convection
!==================================================================================================
